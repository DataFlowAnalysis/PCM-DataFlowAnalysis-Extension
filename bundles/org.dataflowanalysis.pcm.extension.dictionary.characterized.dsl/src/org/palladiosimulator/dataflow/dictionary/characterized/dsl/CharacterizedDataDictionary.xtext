grammar org.palladiosimulator.dataflow.dictionary.characterized.dsl.CharacterizedDataDictionary with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.palladiosimulator.dataflow.dictionary.characterized/model/DataDictionaryCharacterized.ecore"
import "platform:/resource/org.palladiosimulator.dataflow.dictionary.characterized/model/DataDictionaryCharacterized.ecore#//expressions" as ex
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://palladiosimulator.org/dataflow/dictionary/1.0" as dd

DataDictionaryCharacterized returns DataDictionaryCharacterized:
	{DataDictionaryCharacterized}
	'dictionary' 'id' id=STRING
	(
		entries+=DataType |
		enumerations+=Enumeration |
		characteristicTypes+=CharacteristicType |
		characteristics+=Characteristic |
		behaviorDefinitions+=BehaviorDefinition
	)*;

DataType returns dd::DataType:
	CollectionDataType | CompositeDataType | PrimitiveDataType
;

PrimitiveDataType returns dd::PrimitiveDataType:
	'primitiveDataType' name=NameString
;

CollectionDataType returns dd::CollectionDataType:
	'collectionDataType' name=NameString 'using' type=[dd::DataType|NameString]
;

CompositeDataType returns dd::CompositeDataType:
	'compositeDataType' name=NameString '{'
		(components+=Entry)*
	'}'
;

Entry returns dd::Entry:
	name=NameString 'using' type=[dd::DataType|NameString]
;

Enumeration:
	'enum' name=NameString '{'
		literals+=Literal+
	'}'
;

Literal:
	name=NameString
;

CharacteristicType:
	EnumCharacteristicType
;


EnumCharacteristicType:
	'enumCharacteristicType' name=NameString 'using' type=[Enumeration|NameString]
;

Characteristic:
	EnumCharacteristic
;

EnumCharacteristic:
	'enumCharacteristic' name=NameString 'using' type=[EnumCharacteristicType|NameString] '{'
		values+=[Literal|NameString]+
	'}'
;

BehaviorDefinition:
	'behavior' name=NameString '{'
		('input' inputs+=Pin)*
		('output' outputs+=Pin)*
		assignments+=Assignment*
	'}'
;

Pin:
	name=NameString
;

Assignment:
	lhs=OutputDataCharacteristicReference ':=' rhs=Term
;

Term returns ex::Term:
	 BinaryLogicTerm
;

BinaryLogicTerm returns ex::Term:
	UnaryLogicTerm (
		({ex::And.left=current} '&' right=UnaryLogicTerm) |
		({ex::Or.left=current} '|' right=UnaryLogicTerm) 
	)*
;

UnaryLogicTerm returns ex::Term:
	PrimaryTerm | ({ex::Not} '!' term=PrimaryTerm)
;

PrimaryTerm returns ex::Term:
	'(' BinaryLogicTerm ')' | True | False | EnumCharacteristicReference
;

False returns ex::Term:
	{ex::False} 'false'
;

True returns ex::Term:
	{ex::True} 'true'
;

EnumCharacteristicReference returns ex::Term:
	ContainerCharacteristicReference | InputDataCharacteristicReference
;

ContainerCharacteristicReference returns ex::ContainerCharacteristicReference:
	{ex::ContainerCharacteristicReference} 'container' '.' (
		(characteristicType=[CharacteristicType|NameString] '.' (literal=[Literal|NameString] | '*')) | '*' '.' '*'
	)
;

OutputDataCharacteristicReference returns ex::DataCharacteristicReference:
		pin=[Pin|NameString] '.' (
			(characteristicType=[CharacteristicType|NameString] '.' (literal=[Literal|NameString] | '*')) | '*' '.' '*'
	)
;

InputDataCharacteristicReference returns ex::DataCharacteristicReference:
		pin=[Pin|NameString] '.' (
			(characteristicType=[CharacteristicType|NameString] '.' (literal=[Literal|NameString] | '*')) | '*' '.' '*'
	)
;

NameString returns ecore::EString:
	(ID|STRING)
;