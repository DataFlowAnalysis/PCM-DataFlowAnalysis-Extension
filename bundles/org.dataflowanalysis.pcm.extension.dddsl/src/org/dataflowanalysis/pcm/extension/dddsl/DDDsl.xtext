// automatically generated by Xtext
grammar org.dataflowanalysis.pcm.extension.dddsl.DDDsl with org.dataflowanalysis.pcm.extension.dictionary.characterized.dsl.CharacterizedDataDictionary

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.dataflowanalysis.pcm.extension.model/model/dataFlowConfidentiality.ecore"
import "platform:/resource/org.dataflowanalysis.pcm.extension.model/model/dataFlowConfidentiality.ecore#//dictionary" as pddc
import "platform:/resource/org.dataflowanalysis.pcm.extension.model/model/dataFlowConfidentiality.ecore#//characteristics" as pchar
import "platform:/resource/org.dataflowanalysis.pcm.extension.model/model/dataFlowConfidentiality.ecore#//expression" as pex
import "platform:/resource/org.dataflowanalysis.pcm.extension.model/model/dataFlowConfidentiality.ecore#//behaviour" as pbe

import "platform:/resource/org.dataflowanalysis.pcm.extension.dictionary.characterized/model/DataDictionaryCharacterized.ecore" as ddc
import "platform:/resource/org.dataflowanalysis.pcm.extension.dictionary.characterized/model/DataDictionaryCharacterized.ecore#//expressions" as ex

import "platform:/resource/de.uka.ipd.sdq.stoex/model/stoex.ecore" as stoex
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//parameter" as parameter


PCMDataDictionary returns pddc::PCMDataDictionary:
	'dictionary' 'id' id=STRING (
		characteristicEnumerations+=Enumeration |
		characteristicTypes+=CharacteristicType |
		characteristics+=PCMCharacteristic |
		reusableBehaviours+=ReusableBehaviour
	)*;

@Override 
CharacteristicType returns ddc::CharacteristicType:
	EnumCharacteristicType
;


PCMCharacteristic returns pchar::Characteristic:
	PCMEnumCharacteristic
;

PCMEnumCharacteristic returns pchar::EnumCharacteristic:
	'enumCharacteristic' entityName=NameString 'using' type=[ddc::EnumCharacteristicType|NameString] '{'
		values+=[ddc::Literal|NameString]+
	'}'
;

ReusableBehaviour returns pbe::ReusableBehaviour: 
	'behavior' entityName=NameString '{'
		('input' inputVariables+=VariableReference)*
		('output' outputVariables+=VariableReference)*
		variableUsages+=VariableUsage*
	'}'
;

AbstractedNamedReference returns stoex::AbstractNamedReference:
	VariableReference
;

VariableReference returns stoex::VariableReference:
	referenceName=ID
;

VariableUsage returns parameter::VariableUsage:
	namedReference__VariableUsage=AbstractedNamedReference '.' (
		variableCharacterisation_VariableUsage+=VariableCharacterisation |
		('{' variableCharacterisation_VariableUsage+=VariableCharacterisation+ '}')
	) 
;

VariableCharacterisation returns parameter::VariableCharacterisation:
	ConfidentialityVariableCharacterisation
;

ConfidentialityVariableCharacterisation:
	lhs=VariableCharacterizationLhs ':=' rhs=Term
;

VariableCharacterizationLhs returns pex::VariableCharacterizationLhs:
	LhsEnumCharacteristicReference
;

LhsEnumCharacteristicReference returns pex::LhsEnumCharacteristicReference:
	{pex::LhsEnumCharacteristicReference} (
		(characteristicType=[ddc::CharacteristicType|NameString] '.' (
				literal=[ddc::Literal|NameString] | '*')
		) | '*' '.' '*')
;

@Override 
PrimaryTerm returns ex::Term:
	'(' BinaryLogicTerm ')' | True | False | CharacteristicReference
;

CharacteristicReference returns ex::CharacteristicReference:
	NamedEnumCharacteristicReference | ContainerCharacteristicReference // add DataCharacteristicReference
;

NamedEnumCharacteristicReference returns pex::NamedEnumCharacteristicReference: 
	namedReference=AbstractedNamedReference '.' (
		(characteristicType=[ddc::CharacteristicType|NameString] '.' (
				literal=[ddc::Literal|NameString] | '*')
		) | '*' '.' '*')
;

