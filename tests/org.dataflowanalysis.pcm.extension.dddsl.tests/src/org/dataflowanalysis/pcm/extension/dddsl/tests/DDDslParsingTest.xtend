/*
 * generated by Xtext 2.24.0
 */
package org.dataflowanalysis.pcm.^extension.dddsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.dataflowanalysis.pcm.^extension.model.confidentiality.ConfidentialityVariableCharacterisation
import org.dataflowanalysis.pcm.^extension.model.confidentiality.dictionary.PCMDataDictionary
import org.dataflowanalysis.pcm.^extension.model.confidentiality.expression.LhsEnumCharacteristicReference

import static org.hamcrest.CoreMatchers.*
import static org.hamcrest.MatcherAssert.*
import static org.junit.jupiter.api.Assertions.*

@ExtendWith(InjectionExtension)
@InjectWith(DDDslInjectorProvider)
class DDDslParsingTest {

	@Inject
	ParseHelper<PCMDataDictionary> parseHelper

	@Test
	def void loadModel() {
		val result = '''
			dictionary id "123"
		'''.parse
		assertThat(result.id, is("123"))
	}

	@Test
	def void testEnumCharacteristicReferences() {
		val result = '''
			dictionary id "_sgA9QPBCEeufp9jGDRJpXA"
			
			enum Roles {
				User
				Airline
			}
			enumCharacteristicType AssignedRoles using Roles
			enumCharacteristicType ReadAccess using Roles
		'''.parse
	}

	protected def parse(CharSequence text) {
		val result = parseHelper.parse(text)
		assertNotNull(result)
		val errors = result.eResource.errors
		assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		result
	}
}
